; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -O3 -S %s | FileCheck %s

source_filename = "test.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@b = internal unnamed_addr global i1 false, align 4
@c = internal unnamed_addr global i1 false, align 2
@am = internal unnamed_addr global i8 0, align 1

; Function Attrs: nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
; CHECK-LABEL: define dso_local noundef i32 @main(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[DOTB:%.*]] = load i1, ptr @b, align 4
; CHECK-NEXT:    [[CONV1:%.*]] = select i1 [[DOTB]], i32 25, i32 0
; CHECK-NEXT:    store i1 true, ptr @b, align 4
; CHECK-NEXT:    store i8 0, ptr @am, align 1, !tbaa [[TBAA5:![0-9]+]]
; CHECK-NEXT:    br label %[[FOR_BODY_OUTER_I:.*]]
; CHECK:       [[FOR_BODY_OUTER_I]]:
; CHECK-NEXT:    [[AM_PROMOTED:%.*]] = phi i8 [ [[SUB_I5_I:%.*]], %[[FOR_INC_THREAD_I:.*]] ], [ 0, %[[ENTRY]] ]
; CHECK-NEXT:    [[AR_01_PH_I:%.*]] = phi i32 [ -3846, %[[FOR_INC_THREAD_I]] ], [ [[CONV1]], %[[ENTRY]] ]
; CHECK-NEXT:    [[TOBOOL_NOT_I:%.*]] = icmp eq i32 [[AR_01_PH_I]], 0
; CHECK-NEXT:    [[INVARIANT_OP:%.*]] = sub nsw i32 [[AR_01_PH_I]], [[CONV1]]
; CHECK-NEXT:    br i1 [[TOBOOL_NOT_I]], label %[[FOR_BODY_OUTER_I_SPLIT_US:.*]], label %[[FOR_BODY_I_PREHEADER:.*]]
; CHECK:       [[FOR_BODY_I_PREHEADER]]:
; CHECK-NEXT:    [[CMP7_I:%.*]] = icmp slt i32 [[INVARIANT_OP]], 1
; CHECK-NEXT:    br label %[[FOR_BODY_I:.*]]
; CHECK:       [[FOR_BODY_OUTER_I_SPLIT_US]]:
; CHECK-NEXT:    [[CMP7_I_US:%.*]] = icmp slt i32 [[INVARIANT_OP]], 1
; CHECK-NEXT:    br i1 [[CMP7_I_US]], label %[[FOR_INC_THREAD_I]], label %[[FOR_BODY_I_US:.*]]
; CHECK:       [[FOR_BODY_I_US]]:
; CHECK-NEXT:    [[SUB_I_I_US5:%.*]] = phi i8 [ [[SUB_I_I_US:%.*]], %[[FOR_BODY_I_US]] ], [ [[AM_PROMOTED]], %[[FOR_BODY_OUTER_I_SPLIT_US]] ]
; CHECK-NEXT:    [[SUB_I_I_US]] = add nsw i8 [[SUB_I_I_US5]], -6
; CHECK-NEXT:    [[CMP_I_US:%.*]] = icmp ult i8 [[SUB_I_I_US5]], -122
; CHECK-NEXT:    br i1 [[CMP_I_US]], label %[[FOR_BODY_I_US]], label %[[FOR_END_I_SPLIT_US:.*]], !llvm.loop [[LOOP8:![0-9]+]]
; CHECK:       [[FOR_END_I_SPLIT_US]]:
; CHECK-NEXT:    store i8 [[SUB_I_I_US]], ptr @am, align 1, !tbaa [[TBAA5]]
; CHECK-NEXT:    tail call void @bar149_() #[[ATTR2:[0-9]+]]
; CHECK-NEXT:    br label %[[H_EXIT:.*]]
; CHECK:       [[FOR_BODY_I]]:
; CHECK-NEXT:    tail call void @bar155_() #[[ATTR2]]
; CHECK-NEXT:    [[DOTPRE:%.*]] = load i8, ptr @am, align 1, !tbaa [[TBAA5]]
; CHECK-NEXT:    br i1 [[CMP7_I]], label %[[FOR_INC_THREAD_I]], label %[[FOR_INC_I:.*]]
; CHECK:       [[FOR_INC_I]]:
; CHECK-NEXT:    [[SUB_I_I:%.*]] = add i8 [[DOTPRE]], -6
; CHECK-NEXT:    store i8 [[SUB_I_I]], ptr @am, align 1, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[CMP_I:%.*]] = icmp ult i8 [[DOTPRE]], -122
; CHECK-NEXT:    br i1 [[CMP_I]], label %[[FOR_BODY_I]], label %[[H_EXIT]], !llvm.loop [[LOOP8]]
; CHECK:       [[FOR_INC_THREAD_I]]:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i8 [ [[AM_PROMOTED]], %[[FOR_BODY_OUTER_I_SPLIT_US]] ], [ [[DOTPRE]], %[[FOR_BODY_I]] ]
; CHECK-NEXT:    store i1 true, ptr @c, align 2
; CHECK-NEXT:    [[SUB_I5_I]] = add i8 [[TMP0]], -6
; CHECK-NEXT:    store i8 [[SUB_I5_I]], ptr @am, align 1, !tbaa [[TBAA5]]
; CHECK-NEXT:    [[CMP6_I:%.*]] = icmp ult i8 [[TMP0]], -122
; CHECK-NEXT:    br i1 [[CMP6_I]], label %[[FOR_BODY_OUTER_I]], label %[[IF_END:.*]], !llvm.loop [[LOOP8]]
; CHECK:       [[H_EXIT]]:
; CHECK-NEXT:    [[DOTB1_PR:%.*]] = load i1, ptr @c, align 2
; CHECK-NEXT:    br i1 [[DOTB1_PR]], label %[[IF_END]], label %[[IF_THEN:.*]]
; CHECK:       [[IF_THEN]]:
; CHECK-NEXT:    tail call void @foo() #[[ATTR2]]
; CHECK-NEXT:    br label %[[IF_END]]
; CHECK:       [[IF_END]]:
; CHECK-NEXT:    ret i32 0
;
entry:
  %.b = load i1, ptr @b, align 1
  %conv1 = select i1 %.b, i32 25, i32 0
  call fastcc void @h(i32 noundef %conv1)
  %.b1 = load i1, ptr @c, align 1
  br i1 %.b1, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @foo() #2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal fastcc void @h(i32 noundef %g) unnamed_addr #0 {
entry:
  call fastcc void @ab()
  store i8 0, ptr @am, align 1, !tbaa !5
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %ar.0 = phi i32 [ %g, %entry ], [ %ar.1, %for.inc ]
  %0 = load i8, ptr @am, align 1, !tbaa !5
  %conv = sext i8 %0 to i32
  %cmp = icmp sgt i32 %conv, -7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %tobool = icmp ne i32 %ar.0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  call void @bar155_()
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %conv2 = trunc nsw i32 %g to i16
  %.b = load i1, ptr @b, align 1
  %1 = select i1 %.b, i32 -1389728231, i32 0
  %cmp3 = icmp sgt i32 0, %1
  %conv4 = zext i1 %cmp3 to i32
  %conv5 = trunc nuw nsw i32 %conv4 to i16
  %call = call fastcc signext i16 @a(i16 noundef signext %conv2, i16 noundef signext %conv5)
  %conv6 = sext i16 %call to i32
  %cmp7 = icmp slt i32 %ar.0, %conv6
  br i1 %cmp7, label %if.end10, label %for.inc

if.end10:                                         ; preds = %if.end
  store i1 true, ptr @c, align 1
  %conv12 = sext i16 -3846 to i32
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.end10
  %ar.1 = phi i32 [ %conv12, %if.end10 ], [ %ar.0, %if.end ]
  %2 = load i8, ptr @am, align 1, !tbaa !5
  %conv13 = sext i8 %2 to i16
  %call14 = call fastcc signext i16 @d(i16 noundef signext %conv13, i16 noundef signext 6)
  %conv15 = trunc i16 %call14 to i8
  store i8 %conv15, ptr @am, align 1, !tbaa !5
  br label %for.cond, !llvm.loop !8

for.end:                                          ; preds = %for.cond
  %tobool16 = icmp ne i32 %ar.0, 0
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %for.end
  call void @bar149_()
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %for.end
  ret void
}

declare void @foo() local_unnamed_addr #1

declare void @bar155_() local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define internal fastcc signext range(i16 -128, 129) i16 @a(i16 noundef signext %g, i16 noundef signext %i) unnamed_addr #0 {
entry:
  %conv = sext i16 %g to i32
  %conv1 = zext nneg i16 %i to i32
  %add = add nsw i32 %conv, %conv1
  %conv2 = trunc nsw i32 %add to i16
  ret i16 %conv2
}

; Function Attrs: nounwind uwtable
define internal fastcc signext i16 @d(i16 noundef signext %g, i16 noundef signext %i) unnamed_addr #0 {
entry:
  %conv = sext i16 %g to i32
  %sub = sub nsw i32 %conv, 6
  %conv2 = trunc i32 %sub to i16
  ret i16 %conv2
}

declare void @bar149_() local_unnamed_addr #1

; Function Attrs: nounwind uwtable
define internal fastcc void @ab() unnamed_addr #0 {
entry:
  store i1 true, ptr @b, align 1
  ret void
}

attributes #0 = { nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 19.0.0git (https://github.com/gandhi56/llvm-project 9c2c3ded4c01f68858132807fdf07c895e5fadbc)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.mustprogress"}
;.
; CHECK: [[TBAA5]] = !{[[META6:![0-9]+]], [[META6]], i64 0}
; CHECK: [[META6]] = !{!"omnipotent char", [[META7:![0-9]+]], i64 0}
; CHECK: [[META7]] = !{!"Simple C/C++ TBAA"}
; CHECK: [[LOOP8]] = distinct !{[[LOOP8]], [[META9:![0-9]+]]}
; CHECK: [[META9]] = !{!"llvm.loop.mustprogress"}
;.
